// Mova o bloco buildscript para o início do arquivo
/* buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:8.0.2" // Mantém a versão do AGP
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.20" // Ajuste para a versão compatível com AGP
        classpath "com.google.gms:google-services:4.3.15" // Última versão do Google Services
    }
}

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services" // Plugin para integrar Firebase
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

// Removido o fallback e agora os valores são diretamente lidos do local.properties
def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
def flutterVersionName = localProperties.getProperty('flutter.versionName')

android {
    namespace "com.xcore.portal_eam"
    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.xcore.portal_eam"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger() // Utilizando diretamente o valor de local.properties
        versionName flutterVersionName // Utilizando diretamente o valor de local.properties
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                debugSymbolLevel 'FULL' // Gera símbolos completos para depuração.
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:32.0.0') // Versão mais recente do Firebase BOM
    implementation 'com.google.firebase:firebase-analytics-ktx'       // Firebase Analytics
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.20"        // Ajuste para a versão do Kotlin 1.8.20
    // Adicione outras dependências necessárias aqui
}

// Adicione isso para compatibilidade com o Google Services
apply plugin: 'com.google.gms.google-services'
*/

// Mova o bloco buildscript para o início do arquivo
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:8.0.2" // Versão do Android Gradle Plugin
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.20" // Plugin Kotlin compatível
        classpath "com.google.gms:google-services:4.3.15" // Plugin para integrar Firebase
    }
}

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services" // Plugin para integrar Firebase
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.xcore.portal_eam" // Substitua pelo namespace do seu app
    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.xcore.portal_eam" // Substitua pelo seu applicationId
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode 2 // Valor fixo para versionCode
        versionName "2.0.0" // Valor fixo para versionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                debugSymbolLevel 'FULL' // Gera símbolos completos para depuração.
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation platform('com.google.firebase:firebase-bom:32.0.0') // Versão mais recente do Firebase BOM
    implementation 'com.google.firebase:firebase-analytics-ktx'       // Firebase Analytics
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.20"        // Versão do Kotlin compatível
    // Adicione outras dependências necessárias aqui
}

// Adicione isso para compatibilidade com o Google Services
apply plugin: 'com.google.gms.google-services'

